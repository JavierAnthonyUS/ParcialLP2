"""
Archivo de pruebas para la librer√≠a CorePy
Ejecutar: python test_core.py
"""

from core import (
    AnalizadorCuantitativo, 
    AnalizadorCualitativo, 
    AnalizadorBivariado,
    analizar
)


def test_analizador_cuantitativo():
    """Prueba todas las funciones del analizador cuantitativo"""
    print("\n" + "="*70)
    print("TEST 1: ANALIZADOR CUANTITATIVO")
    print("="*70)
    
    # Datos de prueba: Calificaciones de estudiantes
    calificaciones = [85, 90, 78, 92, 88, 76, 95, 89, 84, 91, 87, 83, 94, 86, 90]
    
    print(f"\nüìä Datos: {calificaciones}")
    print(f"üìä Total de observaciones: {len(calificaciones)}")
    
    try:
        analizador = AnalizadorCuantitativo(calificaciones)
        
        # Prueba 1: Medidas de tendencia central
        print("\n--- Medidas de Tendencia Central ---")
        print(f"Media: {analizador.media():.2f}")
        print(f"Mediana: {analizador.mediana():.2f}")
        print(f"Moda: {analizador.moda()}")
        
        # Prueba 2: Medidas de dispersi√≥n
        print("\n--- Medidas de Dispersi√≥n ---")
        print(f"Varianza: {analizador.varianza():.2f}")
        print(f"Desviaci√≥n Est√°ndar: {analizador.desviacion_estandar():.2f}")
        print(f"Coeficiente de Variaci√≥n: {analizador.coeficiente_variacion():.2f}%")
        print(f"Rango: {analizador.rango():.2f}")
        print(f"Rango Intercuart√≠lico (IQR): {analizador.rango_intercuartilico():.2f}")
        
        # Prueba 3: Percentiles y cuartiles
        print("\n--- Percentiles y Cuartiles ---")
        q1, q2, q3 = analizador.cuartiles()
        print(f"Q1 (25%): {q1:.2f}")
        print(f"Q2 (50%): {q2:.2f}")
        print(f"Q3 (75%): {q3:.2f}")
        print(f"Percentil 90: {analizador.percentil(90):.2f}")
        
        # Prueba 4: Medidas de forma
        print("\n--- Medidas de Forma ---")
        print(f"Asimetr√≠a: {analizador.asimetria():.4f}")
        if analizador.asimetria() > 0:
            print("  ‚Üí Distribuci√≥n asim√©trica a la derecha")
        elif analizador.asimetria() < 0:
            print("  ‚Üí Distribuci√≥n asim√©trica a la izquierda")
        else:
            print("  ‚Üí Distribuci√≥n sim√©trica")
            
        print(f"Curtosis: {analizador.curtosis():.4f}")
        if analizador.curtosis() > 0:
            print("  ‚Üí Distribuci√≥n leptoc√∫rtica (colas pesadas)")
        elif analizador.curtosis() < 0:
            print("  ‚Üí Distribuci√≥n platic√∫rtica (colas ligeras)")
        else:
            print("  ‚Üí Distribuci√≥n mesoc√∫rtica (similar a normal)")
        
        # Prueba 5: Resumen completo
        print("\n--- Resumen Estad√≠stico Completo ---")
        resumen = analizador.resumen()
        for clave, valor in resumen.items():
            print(f"{clave}: {valor}")
        
        print("\n‚úÖ TEST 1 COMPLETADO CON √âXITO")
        return True
        
    except Exception as e:
        print(f"\n‚ùå ERROR EN TEST 1: {str(e)}")
        return False


def test_analizador_cualitativo():
    """Prueba todas las funciones del analizador cualitativo"""
    print("\n" + "="*70)
    print("TEST 2: ANALIZADOR CUALITATIVO")
    print("="*70)
    
    # Datos de prueba: Preferencias de transporte
    transportes = ['auto', 'bus', 'bicicleta', 'bus', 'auto', 'metro', 
                   'bus', 'bicicleta', 'auto', 'bus', 'metro', 'bus',
                   'auto', 'bicicleta', 'bus', 'metro', 'bus']
    
    print(f"\nüìä Datos: {transportes}")
    print(f"üìä Total de observaciones: {len(transportes)}")
    
    try:
        analizador = AnalizadorCualitativo(transportes)
        
        # Prueba 1: Informaci√≥n b√°sica
        print("\n--- Informaci√≥n B√°sica ---")
        print(f"Categor√≠as √∫nicas: {analizador.categorias_unicas()}")
        print(f"Moda: {analizador.moda()}")
        
        # Prueba 2: Frecuencias
        print("\n--- Frecuencias Absolutas ---")
        frec_abs = analizador.frecuencias_absolutas()
        for categoria, freq in sorted(frec_abs.items(), key=lambda x: x[1], reverse=True):
            print(f"{categoria}: {freq}")
        
        print("\n--- Frecuencias Porcentuales ---")
        frec_porc = analizador.frecuencias_porcentuales()
        for categoria, freq in sorted(frec_porc.items(), key=lambda x: x[1], reverse=True):
            print(f"{categoria}: {freq}%")
        
        # Prueba 3: Tabla de frecuencias completa
        print("\n--- Tabla de Frecuencias Completa ---")
        print(f"{'Categor√≠a':<15} {'Frec.Abs':<10} {'Frec.Rel':<12} {'Frec.%':<10} {'Frec.Acum':<12}")
        print("-" * 70)
        
        tabla = analizador.tabla_frecuencias()
        for cat, valores in tabla.items():
            print(f"{cat:<15} {valores['frecuencia_absoluta']:<10} "
                  f"{valores['frecuencia_relativa']:<12.4f} "
                  f"{valores['frecuencia_porcentual']:<10.2f} "
                  f"{valores['frecuencia_acumulada']:<12}")
        
        # Prueba 4: Medidas de diversidad
        print("\n--- Medidas de Diversidad ---")
        print(f"Entrop√≠a de Shannon: {analizador.entropia():.4f}")
        print(f"√çndice de Simpson: {analizador.indice_diversidad_simpson():.4f}")
        
        # Prueba 5: Resumen completo
        print("\n--- Resumen Completo ---")
        resumen = analizador.resumen()
        for clave, valor in resumen.items():
            print(f"{clave}: {valor}")
        
        print("\n‚úÖ TEST 2 COMPLETADO CON √âXITO")
        return True
        
    except Exception as e:
        print(f"\n‚ùå ERROR EN TEST 2: {str(e)}")
        return False


def test_analizador_bivariado():
    """Prueba el an√°lisis de correlaci√≥n y regresi√≥n"""
    print("\n" + "="*70)
    print("TEST 3: ANALIZADOR BIVARIADO")
    print("="*70)
    
    # Datos de prueba: Horas de estudio vs Calificaci√≥n
    horas_estudio = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    calificaciones = [50, 55, 62, 68, 75, 79, 85, 90, 93, 98]
    
    print(f"\nüìä Variable X (Horas de estudio): {horas_estudio}")
    print(f"üìä Variable Y (Calificaciones): {calificaciones}")
    
    try:
        analizador = AnalizadorBivariado(horas_estudio, calificaciones)
        
        # Prueba 1: Covarianza
        print("\n--- Medidas de Asociaci√≥n ---")
        print(f"Covarianza: {analizador.covarianza():.4f}")
        
        # Prueba 2: Correlaci√≥n
        correlacion = analizador.correlacion_pearson()
        print(f"Correlaci√≥n de Pearson: {correlacion:.4f}")
        
        if correlacion > 0.7:
            print("  ‚Üí Correlaci√≥n positiva fuerte")
        elif correlacion > 0.3:
            print("  ‚Üí Correlaci√≥n positiva moderada")
        elif correlacion > -0.3:
            print("  ‚Üí Correlaci√≥n d√©bil o nula")
        elif correlacion > -0.7:
            print("  ‚Üí Correlaci√≥n negativa moderada")
        else:
            print("  ‚Üí Correlaci√≥n negativa fuerte")
        
        # Prueba 3: R¬≤
        r2 = analizador.coeficiente_determinacion()
        print(f"Coeficiente de Determinaci√≥n (R¬≤): {r2:.4f}")
        print(f"  ‚Üí {r2*100:.2f}% de la varianza de Y es explicada por X")
        
        # Prueba 4: Regresi√≥n lineal
        print("\n--- Regresi√≥n Lineal Simple ---")
        regresion = analizador.regresion_lineal_simple()
        print(f"Intercepto (Œ≤‚ÇÄ): {regresion['intercepto']}")
        print(f"Pendiente (Œ≤‚ÇÅ): {regresion['pendiente']}")
        print(f"Ecuaci√≥n: {regresion['ecuacion']}")
        
        # Hacer una predicci√≥n
        horas_nueva = 12
        prediccion = regresion['intercepto'] + regresion['pendiente'] * horas_nueva
        print(f"\nüí° Predicci√≥n: Si estudias {horas_nueva} horas, "
              f"tu calificaci√≥n estimada ser√≠a: {prediccion:.2f}")
        
        # Prueba 5: Resumen completo
        print("\n--- Resumen Completo ---")
        resumen = analizador.resumen()
        for clave, valor in resumen.items():
            if isinstance(valor, dict):
                print(f"\n{clave}:")
                for k, v in valor.items():
                    print(f"  {k}: {v}")
            else:
                print(f"{clave}: {valor}")
        
        print("\n‚úÖ TEST 3 COMPLETADO CON √âXITO")
        return True
        
    except Exception as e:
        print(f"\n‚ùå ERROR EN TEST 3: {str(e)}")
        return False


def test_funcion_analizar():
    """Prueba la funci√≥n helper 'analizar' con detecci√≥n autom√°tica"""
    print("\n" + "="*70)
    print("TEST 4: FUNCI√ìN HELPER 'analizar()' CON DETECCI√ìN AUTOM√ÅTICA")
    print("="*70)
    
    try:
        # Datos num√©ricos
        print("\n--- Prueba con datos num√©ricos (auto-detecci√≥n) ---")
        datos_num = [10, 20, 30, 40, 50]
        analizador1 = analizar(datos_num, tipo='auto')
        print(f"Tipo detectado: {type(analizador1).__name__}")
        print(f"Media: {analizador1.media()}")
        
        # Datos categ√≥ricos
        print("\n--- Prueba con datos categ√≥ricos (auto-detecci√≥n) ---")
        datos_cat = ['A', 'B', 'A', 'C', 'B', 'A']
        analizador2 = analizar(datos_cat, tipo='auto')
        print(f"Tipo detectado: {type(analizador2).__name__}")
        print(f"Moda: {analizador2.moda()}")
        
        print("\n‚úÖ TEST 4 COMPLETADO CON √âXITO")
        return True
        
    except Exception as e:
        print(f"\n‚ùå ERROR EN TEST 4: {str(e)}")
        return False


def test_casos_borde():
    """Prueba casos especiales y validaciones"""
    print("\n" + "="*70)
    print("TEST 5: CASOS BORDE Y VALIDACIONES")
    print("="*70)
    
    resultados = []
    
    # Test 5.1: Lista vac√≠a
    print("\n--- Test 5.1: Lista vac√≠a ---")
    try:
        AnalizadorCuantitativo([])
        print("‚ùå FALL√ì: Deber√≠a lanzar error con lista vac√≠a")
        resultados.append(False)
    except ValueError as e:
        print(f"‚úÖ CORRECTO: Error capturado - {e}")
        resultados.append(True)
    
    # Test 5.2: Datos no num√©ricos en cuantitativo
    print("\n--- Test 5.2: Datos no num√©ricos en analizador cuantitativo ---")
    try:
        AnalizadorCuantitativo([1, 2, 'tres', 4])
        print("‚ùå FALL√ì: Deber√≠a lanzar error con datos no num√©ricos")
        resultados.append(False)
    except TypeError as e:
        print(f"‚úÖ CORRECTO: Error capturado - {e}")
        resultados.append(True)
    
    # Test 5.3: Datos con valores iguales (sin varianza)
    print("\n--- Test 5.3: Datos sin varianza ---")
    try:
        analizador = AnalizadorCuantitativo([5, 5, 5, 5, 5])
        print(f"Media: {analizador.media()}")
        print(f"Desviaci√≥n est√°ndar: {analizador.desviacion_estandar()}")
        print("‚úÖ CORRECTO: Maneja correctamente datos sin varianza")
        resultados.append(True)
    except Exception as e:
        print(f"‚ùå FALL√ì: {e}")
        resultados.append(False)
    
    # Test 5.4: Diferentes tama√±os en bivariado
    print("\n--- Test 5.4: Variables de diferente tama√±o ---")
    try:
        AnalizadorBivariado([1, 2, 3], [4, 5])
        print("‚ùå FALL√ì: Deber√≠a lanzar error con tama√±os diferentes")
        resultados.append(False)
    except ValueError as e:
        print(f"‚úÖ CORRECTO: Error capturado - {e}")
        resultados.append(True)
    
    # Test 5.5: Datos con un solo elemento √∫nico (cualitativo)
    print("\n--- Test 5.5: Datos cualitativos con una sola categor√≠a ---")
    try:
        analizador = AnalizadorCualitativo(['A', 'A', 'A', 'A'])
        print(f"Moda: {analizador.moda()}")
        print(f"Entrop√≠a: {analizador.entropia()}")
        print("‚úÖ CORRECTO: Maneja correctamente una sola categor√≠a")
        resultados.append(True)
    except Exception as e:
        print(f"‚ùå FALL√ì: {e}")
        resultados.append(False)
    
    if all(resultados):
        print("\n‚úÖ TEST 5 COMPLETADO CON √âXITO")
        return True
    else:
        print(f"\n‚ö†Ô∏è TEST 5 COMPLETADO CON {resultados.count(False)} FALLOS")
        return False


def ejecutar_todos_los_tests():
    """Ejecuta todos los tests y muestra un resumen"""
    print("\n" + "="*70)
    print("üß™ INICIANDO SUITE DE PRUEBAS COMPLETA")
    print("="*70)
    
    resultados = {
        'Test 1 - Cuantitativo': test_analizador_cuantitativo(),
        'Test 2 - Cualitativo': test_analizador_cualitativo(),
        'Test 3 - Bivariado': test_analizador_bivariado(),
        'Test 4 - Funci√≥n Helper': test_funcion_analizar(),
        'Test 5 - Casos Borde': test_casos_borde()
    }
    
    # Resumen final
    print("\n" + "="*70)
    print("üìä RESUMEN DE RESULTADOS")
    print("="*70)
    
    for nombre_test, resultado in resultados.items():
        simbolo = "‚úÖ" if resultado else "‚ùå"
        print(f"{simbolo} {nombre_test}: {'PAS√ì' if resultado else 'FALL√ì'}")
    
    total_exitosos = sum(resultados.values())
    total_tests = len(resultados)
    
    print("\n" + "="*70)
    print(f"TOTAL: {total_exitosos}/{total_tests} tests exitosos "
          f"({(total_exitosos/total_tests)*100:.1f}%)")
    print("="*70)
    
    if total_exitosos == total_tests:
        print("\nüéâ ¬°TODOS LOS TESTS PASARON! La librer√≠a funciona correctamente.")
    else:
        print(f"\n‚ö†Ô∏è {total_tests - total_exitosos} test(s) fallaron. "
              "Revisa los mensajes de error arriba.")


if __name__ == "__main__":
    ejecutar_todos_los_tests()
